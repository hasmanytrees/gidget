= gidget

The smallest taco-loving blog engine in the world!

Gidget is a minimalist blog engine designed to run on Heroku with a Git-based workflow.  It is built upon Sinatra and uses Haml and rdiscount for templating/markup.  It was largely inspired by Toto, however Gidget was built on top of a DSL to minimize code.

== Basic Structure

* Sinatra based server
* A singleton array containing post information (the body of a post is lazily-loaded)
* A class to handle post information

== Routing

* / - an index template with access to the full array of posts
* /2010 - an archive template with all access to all posts from the specified year
* /2010/11 - an archive template with access to all posts from the specified year/month
* /2010/11/19 - an archive template with access to all posts from the specified year/month/day
* /2010/11/19/first-post - a post template with access to the full array of posts and the current post index
* /some-special-page - a page template with access to the full array of posts

== Post Creation

Posts are simply .txt files located under a folder named posts located off the root of the web app.  Text files contain two sections of data.  The first is metadata including at least a title and date as such:

  title: My great post title
  date: 2010-11-19

The second section is the body of the post and uses markdown as it's markup language.  The two sections should be separated by an empty line.

File name and structure (other than the .txt extension) don't matter.  Gidget will determine request paths off of the date and title metadata and sort them accordingly.

== Heroku

Gidget is meant to run on a Heroku.  It offers version management through Git, and uses the advantages provided by running behind a reverse-proxy cache such as Varnish.  Gidget is meant to be minimalist in design while taking these factors into consideration.

== Getting Started

To get started using Gidget, first install the gem:

  gem install gidget

Once them gem is installed you can use the gidget generator to create a stub for you:

  gidget blog

This would create a stub in a directory named blog (it will create the directory if it doesn't already exist).  To run the site simply run rackup from the root:

  cd blog
  rackup

== TO BE DONE

* Add a paging route to allow /page/1 type usage.  Need to determine best way of handling options/setting such as page_size.

== Contributing to gidget
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2010 hasmanytrees. See LICENSE.txt for
further details.

